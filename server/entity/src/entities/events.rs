//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use chrono::Utc;
use sea_orm::entity::prelude::*;
use sea_orm::prelude::async_trait::async_trait;
use sea_orm::ActiveValue;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "events")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub queue: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub trace_id: String,
    pub event: Json,
    pub meta: Json,
    pub ts: DateTime,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(mut self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        let now = Utc::now().naive_utc();
        if insert {
            self.created_at = ActiveValue::Set(now.clone());
        }
        self.updated_at = ActiveValue::Set(now);

        Ok(self)
    }
}
